// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MicroserviceClient is the client API for Microservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicroserviceClient interface {
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
	Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error)
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error)
	DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCourseSections(ctx context.Context, in *GetCourseSectionsRequest, opts ...grpc.CallOption) (*GetCourseSectionsResponse, error)
	CreateCourseSection(ctx context.Context, in *CreateCourseSectionRequest, opts ...grpc.CallOption) (*CreateCourseSectionResponse, error)
	UpdateCourseSection(ctx context.Context, in *UpdateCourseSectionRequest, opts ...grpc.CallOption) (*UpdateCourseSectionResponse, error)
	DeleteCourseSection(ctx context.Context, in *DeleteCourseSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIndicators(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorsResponse, error)
	CreateIndicator(ctx context.Context, in *CreateIndicatorRequest, opts ...grpc.CallOption) (*CreateIndicatorResponse, error)
	UpdateIndicator(ctx context.Context, in *UpdateIndicatorRequest, opts ...grpc.CallOption) (*UpdateIndicatorResponse, error)
	DeleteIndicator(ctx context.Context, in *DeleteIndicatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuestionsResponse, error)
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAnswers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnswersResponse, error)
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error)
	UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*UpdateAnswerResponse, error)
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPoll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPollResponse, error)
	GetScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScoreResponse, error)
	UpsertScore(ctx context.Context, in *UpsertScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIndicatorsScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorScoreResponse, error)
	GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error)
	UpsertReview(ctx context.Context, in *UpsertReviewRequest, opts ...grpc.CallOption) (*UpsertReviewResponse, error)
	DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmailVerification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmailVerificationCheckCode(ctx context.Context, in *EmailVerificationCheckCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
}

type microserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroserviceClient(cc grpc.ClientConnInterface) MicroserviceClient {
	return &microserviceClient{cc}
}

func (c *microserviceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	out := new(SignUpResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Logout(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetCourse(ctx context.Context, in *GetCourseRequest, opts ...grpc.CallOption) (*GetCourseResponse, error) {
	out := new(GetCourseResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateCourse(ctx context.Context, in *UpdateCourseRequest, opts ...grpc.CallOption) (*UpdateCourseResponse, error) {
	out := new(UpdateCourseResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteCourse(ctx context.Context, in *DeleteCourseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetCourseSections(ctx context.Context, in *GetCourseSectionsRequest, opts ...grpc.CallOption) (*GetCourseSectionsResponse, error) {
	out := new(GetCourseSectionsResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetCourseSections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateCourseSection(ctx context.Context, in *CreateCourseSectionRequest, opts ...grpc.CallOption) (*CreateCourseSectionResponse, error) {
	out := new(CreateCourseSectionResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/CreateCourseSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateCourseSection(ctx context.Context, in *UpdateCourseSectionRequest, opts ...grpc.CallOption) (*UpdateCourseSectionResponse, error) {
	out := new(UpdateCourseSectionResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateCourseSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteCourseSection(ctx context.Context, in *DeleteCourseSectionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteCourseSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetIndicators(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorsResponse, error) {
	out := new(GetIndicatorsResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetIndicators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateIndicator(ctx context.Context, in *CreateIndicatorRequest, opts ...grpc.CallOption) (*CreateIndicatorResponse, error) {
	out := new(CreateIndicatorResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/CreateIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateIndicator(ctx context.Context, in *UpdateIndicatorRequest, opts ...grpc.CallOption) (*UpdateIndicatorResponse, error) {
	out := new(UpdateIndicatorResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteIndicator(ctx context.Context, in *DeleteIndicatorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteIndicator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetQuestions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetQuestionsResponse, error) {
	out := new(GetQuestionsResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetAnswers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAnswersResponse, error) {
	out := new(GetAnswersResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*CreateAnswerResponse, error) {
	out := new(CreateAnswerResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/CreateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*UpdateAnswerResponse, error) {
	out := new(UpdateAnswerResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpdateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetPoll(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPollResponse, error) {
	out := new(GetPollResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScoreResponse, error) {
	out := new(GetScoreResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpsertScore(ctx context.Context, in *UpsertScoreRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpsertScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetIndicatorsScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetIndicatorScoreResponse, error) {
	out := new(GetIndicatorScoreResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetIndicatorsScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) GetReviews(ctx context.Context, in *GetReviewsRequest, opts ...grpc.CallOption) (*GetReviewsResponse, error) {
	out := new(GetReviewsResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/GetReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UpsertReview(ctx context.Context, in *UpsertReviewRequest, opts ...grpc.CallOption) (*UpsertReviewResponse, error) {
	out := new(UpsertReviewResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UpsertReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteReview(ctx context.Context, in *DeleteReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) EmailVerification(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/EmailVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) EmailVerificationCheckCode(ctx context.Context, in *EmailVerificationCheckCodeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/EmailVerificationCheckCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microserviceClient) Payment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, "/zen_api.v1.Microservice/Payment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroserviceServer is the server API for Microservice service.
// All implementations must embed UnimplementedMicroserviceServer
// for forward compatibility
type MicroserviceServer interface {
	SignIn(context.Context, *SignInRequest) (*emptypb.Empty, error)
	SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error)
	Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error)
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error)
	DeleteCourse(context.Context, *DeleteCourseRequest) (*emptypb.Empty, error)
	GetCourseSections(context.Context, *GetCourseSectionsRequest) (*GetCourseSectionsResponse, error)
	CreateCourseSection(context.Context, *CreateCourseSectionRequest) (*CreateCourseSectionResponse, error)
	UpdateCourseSection(context.Context, *UpdateCourseSectionRequest) (*UpdateCourseSectionResponse, error)
	DeleteCourseSection(context.Context, *DeleteCourseSectionRequest) (*emptypb.Empty, error)
	GetIndicators(context.Context, *emptypb.Empty) (*GetIndicatorsResponse, error)
	CreateIndicator(context.Context, *CreateIndicatorRequest) (*CreateIndicatorResponse, error)
	UpdateIndicator(context.Context, *UpdateIndicatorRequest) (*UpdateIndicatorResponse, error)
	DeleteIndicator(context.Context, *DeleteIndicatorRequest) (*emptypb.Empty, error)
	GetQuestions(context.Context, *emptypb.Empty) (*GetQuestionsResponse, error)
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error)
	GetAnswers(context.Context, *emptypb.Empty) (*GetAnswersResponse, error)
	CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error)
	UpdateAnswer(context.Context, *UpdateAnswerRequest) (*UpdateAnswerResponse, error)
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*emptypb.Empty, error)
	GetPoll(context.Context, *emptypb.Empty) (*GetPollResponse, error)
	GetScore(context.Context, *emptypb.Empty) (*GetScoreResponse, error)
	UpsertScore(context.Context, *UpsertScoreRequest) (*emptypb.Empty, error)
	GetIndicatorsScore(context.Context, *emptypb.Empty) (*GetIndicatorScoreResponse, error)
	GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error)
	UpsertReview(context.Context, *UpsertReviewRequest) (*UpsertReviewResponse, error)
	DeleteReview(context.Context, *DeleteReviewRequest) (*emptypb.Empty, error)
	EmailVerification(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	EmailVerificationCheckCode(context.Context, *EmailVerificationCheckCodeRequest) (*emptypb.Empty, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error)
	Payment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	mustEmbedUnimplementedMicroserviceServer()
}

// UnimplementedMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedMicroserviceServer struct {
}

func (UnimplementedMicroserviceServer) SignIn(context.Context, *SignInRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedMicroserviceServer) SignUp(context.Context, *SignUpRequest) (*SignUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedMicroserviceServer) Logout(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedMicroserviceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMicroserviceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMicroserviceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMicroserviceServer) GetCourse(context.Context, *GetCourseRequest) (*GetCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourse not implemented")
}
func (UnimplementedMicroserviceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedMicroserviceServer) UpdateCourse(context.Context, *UpdateCourseRequest) (*UpdateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourse not implemented")
}
func (UnimplementedMicroserviceServer) DeleteCourse(context.Context, *DeleteCourseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourse not implemented")
}
func (UnimplementedMicroserviceServer) GetCourseSections(context.Context, *GetCourseSectionsRequest) (*GetCourseSectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseSections not implemented")
}
func (UnimplementedMicroserviceServer) CreateCourseSection(context.Context, *CreateCourseSectionRequest) (*CreateCourseSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourseSection not implemented")
}
func (UnimplementedMicroserviceServer) UpdateCourseSection(context.Context, *UpdateCourseSectionRequest) (*UpdateCourseSectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourseSection not implemented")
}
func (UnimplementedMicroserviceServer) DeleteCourseSection(context.Context, *DeleteCourseSectionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourseSection not implemented")
}
func (UnimplementedMicroserviceServer) GetIndicators(context.Context, *emptypb.Empty) (*GetIndicatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndicators not implemented")
}
func (UnimplementedMicroserviceServer) CreateIndicator(context.Context, *CreateIndicatorRequest) (*CreateIndicatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndicator not implemented")
}
func (UnimplementedMicroserviceServer) UpdateIndicator(context.Context, *UpdateIndicatorRequest) (*UpdateIndicatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIndicator not implemented")
}
func (UnimplementedMicroserviceServer) DeleteIndicator(context.Context, *DeleteIndicatorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndicator not implemented")
}
func (UnimplementedMicroserviceServer) GetQuestions(context.Context, *emptypb.Empty) (*GetQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestions not implemented")
}
func (UnimplementedMicroserviceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedMicroserviceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedMicroserviceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedMicroserviceServer) GetAnswers(context.Context, *emptypb.Empty) (*GetAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswers not implemented")
}
func (UnimplementedMicroserviceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*CreateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedMicroserviceServer) UpdateAnswer(context.Context, *UpdateAnswerRequest) (*UpdateAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswer not implemented")
}
func (UnimplementedMicroserviceServer) DeleteAnswer(context.Context, *DeleteAnswerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedMicroserviceServer) GetPoll(context.Context, *emptypb.Empty) (*GetPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (UnimplementedMicroserviceServer) GetScore(context.Context, *emptypb.Empty) (*GetScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScore not implemented")
}
func (UnimplementedMicroserviceServer) UpsertScore(context.Context, *UpsertScoreRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertScore not implemented")
}
func (UnimplementedMicroserviceServer) GetIndicatorsScore(context.Context, *emptypb.Empty) (*GetIndicatorScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndicatorsScore not implemented")
}
func (UnimplementedMicroserviceServer) GetReviews(context.Context, *GetReviewsRequest) (*GetReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviews not implemented")
}
func (UnimplementedMicroserviceServer) UpsertReview(context.Context, *UpsertReviewRequest) (*UpsertReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertReview not implemented")
}
func (UnimplementedMicroserviceServer) DeleteReview(context.Context, *DeleteReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReview not implemented")
}
func (UnimplementedMicroserviceServer) EmailVerification(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerification not implemented")
}
func (UnimplementedMicroserviceServer) EmailVerificationCheckCode(context.Context, *EmailVerificationCheckCodeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmailVerificationCheckCode not implemented")
}
func (UnimplementedMicroserviceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMicroserviceServer) DeleteFile(context.Context, *DeleteFileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedMicroserviceServer) Payment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Payment not implemented")
}
func (UnimplementedMicroserviceServer) mustEmbedUnimplementedMicroserviceServer() {}

// UnsafeMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicroserviceServer will
// result in compilation errors.
type UnsafeMicroserviceServer interface {
	mustEmbedUnimplementedMicroserviceServer()
}

func RegisterMicroserviceServer(s grpc.ServiceRegistrar, srv MicroserviceServer) {
	s.RegisterService(&Microservice_ServiceDesc, srv)
}

func _Microservice_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Logout(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetCourse(ctx, req.(*GetCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateCourse(ctx, req.(*UpdateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteCourse(ctx, req.(*DeleteCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetCourseSections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseSectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetCourseSections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetCourseSections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetCourseSections(ctx, req.(*GetCourseSectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateCourseSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateCourseSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/CreateCourseSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateCourseSection(ctx, req.(*CreateCourseSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateCourseSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourseSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateCourseSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateCourseSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateCourseSection(ctx, req.(*UpdateCourseSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteCourseSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCourseSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteCourseSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteCourseSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteCourseSection(ctx, req.(*DeleteCourseSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetIndicators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetIndicators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetIndicators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetIndicators(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/CreateIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateIndicator(ctx, req.(*CreateIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateIndicator(ctx, req.(*UpdateIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteIndicator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteIndicator(ctx, req.(*DeleteIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetQuestions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetAnswers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/CreateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpdateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpdateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpdateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpdateAnswer(ctx, req.(*UpdateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetPoll(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetScore(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpsertScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpsertScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpsertScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpsertScore(ctx, req.(*UpsertScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetIndicatorsScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetIndicatorsScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetIndicatorsScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetIndicatorsScore(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_GetReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).GetReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/GetReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).GetReviews(ctx, req.(*GetReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UpsertReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UpsertReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UpsertReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UpsertReview(ctx, req.(*UpsertReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteReview(ctx, req.(*DeleteReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_EmailVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).EmailVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/EmailVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).EmailVerification(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_EmailVerificationCheckCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailVerificationCheckCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).EmailVerificationCheckCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/EmailVerificationCheckCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).EmailVerificationCheckCode(ctx, req.(*EmailVerificationCheckCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Microservice_Payment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroserviceServer).Payment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zen_api.v1.Microservice/Payment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroserviceServer).Payment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Microservice_ServiceDesc is the grpc.ServiceDesc for Microservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Microservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zen_api.v1.Microservice",
	HandlerType: (*MicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignIn",
			Handler:    _Microservice_SignIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Microservice_SignUp_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Microservice_Logout_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Microservice_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Microservice_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Microservice_DeleteUser_Handler,
		},
		{
			MethodName: "GetCourse",
			Handler:    _Microservice_GetCourse_Handler,
		},
		{
			MethodName: "CreateCourse",
			Handler:    _Microservice_CreateCourse_Handler,
		},
		{
			MethodName: "UpdateCourse",
			Handler:    _Microservice_UpdateCourse_Handler,
		},
		{
			MethodName: "DeleteCourse",
			Handler:    _Microservice_DeleteCourse_Handler,
		},
		{
			MethodName: "GetCourseSections",
			Handler:    _Microservice_GetCourseSections_Handler,
		},
		{
			MethodName: "CreateCourseSection",
			Handler:    _Microservice_CreateCourseSection_Handler,
		},
		{
			MethodName: "UpdateCourseSection",
			Handler:    _Microservice_UpdateCourseSection_Handler,
		},
		{
			MethodName: "DeleteCourseSection",
			Handler:    _Microservice_DeleteCourseSection_Handler,
		},
		{
			MethodName: "GetIndicators",
			Handler:    _Microservice_GetIndicators_Handler,
		},
		{
			MethodName: "CreateIndicator",
			Handler:    _Microservice_CreateIndicator_Handler,
		},
		{
			MethodName: "UpdateIndicator",
			Handler:    _Microservice_UpdateIndicator_Handler,
		},
		{
			MethodName: "DeleteIndicator",
			Handler:    _Microservice_DeleteIndicator_Handler,
		},
		{
			MethodName: "GetQuestions",
			Handler:    _Microservice_GetQuestions_Handler,
		},
		{
			MethodName: "CreateQuestion",
			Handler:    _Microservice_CreateQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Microservice_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _Microservice_DeleteQuestion_Handler,
		},
		{
			MethodName: "GetAnswers",
			Handler:    _Microservice_GetAnswers_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _Microservice_CreateAnswer_Handler,
		},
		{
			MethodName: "UpdateAnswer",
			Handler:    _Microservice_UpdateAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _Microservice_DeleteAnswer_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _Microservice_GetPoll_Handler,
		},
		{
			MethodName: "GetScore",
			Handler:    _Microservice_GetScore_Handler,
		},
		{
			MethodName: "UpsertScore",
			Handler:    _Microservice_UpsertScore_Handler,
		},
		{
			MethodName: "GetIndicatorsScore",
			Handler:    _Microservice_GetIndicatorsScore_Handler,
		},
		{
			MethodName: "GetReviews",
			Handler:    _Microservice_GetReviews_Handler,
		},
		{
			MethodName: "UpsertReview",
			Handler:    _Microservice_UpsertReview_Handler,
		},
		{
			MethodName: "DeleteReview",
			Handler:    _Microservice_DeleteReview_Handler,
		},
		{
			MethodName: "EmailVerification",
			Handler:    _Microservice_EmailVerification_Handler,
		},
		{
			MethodName: "EmailVerificationCheckCode",
			Handler:    _Microservice_EmailVerificationCheckCode_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _Microservice_UploadFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Microservice_DeleteFile_Handler,
		},
		{
			MethodName: "Payment",
			Handler:    _Microservice_Payment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microservice.proto",
}
