// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: microservice.proto

package pkg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PaymentRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseID

	return nil
}

// PaymentRequestValidationError is the validation error returned by
// PaymentRequest.Validate if the designated constraints aren't met.
type PaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentRequestValidationError) ErrorName() string { return "PaymentRequestValidationError" }

// Error satisfies the builtin error interface
func (e PaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentRequestValidationError{}

// Validate checks the field values on PaymentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PaymentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Status

	return nil
}

// PaymentResponseValidationError is the validation error returned by
// PaymentResponse.Validate if the designated constraints aren't met.
type PaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentResponseValidationError) ErrorName() string { return "PaymentResponseValidationError" }

// Error satisfies the builtin error interface
func (e PaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilePath

	return nil
}

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on UploadFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UploadFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for File

	return nil
}

// UploadFileRequestValidationError is the validation error returned by
// UploadFileRequest.Validate if the designated constraints aren't met.
type UploadFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileRequestValidationError) ErrorName() string {
	return "UploadFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileRequestValidationError{}

// Validate checks the field values on UploadFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UploadFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilePath

	return nil
}

// UploadFileResponseValidationError is the validation error returned by
// UploadFileResponse.Validate if the designated constraints aren't met.
type UploadFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadFileResponseValidationError) ErrorName() string {
	return "UploadFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadFileResponseValidationError{}

// Validate checks the field values on EmailVerificationCheckCodeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *EmailVerificationCheckCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// EmailVerificationCheckCodeRequestValidationError is the validation error
// returned by EmailVerificationCheckCodeRequest.Validate if the designated
// constraints aren't met.
type EmailVerificationCheckCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmailVerificationCheckCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmailVerificationCheckCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmailVerificationCheckCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmailVerificationCheckCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmailVerificationCheckCodeRequestValidationError) ErrorName() string {
	return "EmailVerificationCheckCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EmailVerificationCheckCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmailVerificationCheckCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmailVerificationCheckCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmailVerificationCheckCodeRequestValidationError{}

// Validate checks the field values on DeleteReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteReviewRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CourseId

	return nil
}

// DeleteReviewRequestValidationError is the validation error returned by
// DeleteReviewRequest.Validate if the designated constraints aren't met.
type DeleteReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReviewRequestValidationError) ErrorName() string {
	return "DeleteReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReviewRequestValidationError{}

// Validate checks the field values on UpsertReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertReviewRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	// no validation rules for Feedback

	return nil
}

// UpsertReviewRequestValidationError is the validation error returned by
// UpsertReviewRequest.Validate if the designated constraints aren't met.
type UpsertReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertReviewRequestValidationError) ErrorName() string {
	return "UpsertReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertReviewRequestValidationError{}

// Validate checks the field values on UpsertReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertReviewResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpsertReviewResponseValidationError is the validation error returned by
// UpsertReviewResponse.Validate if the designated constraints aren't met.
type UpsertReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertReviewResponseValidationError) ErrorName() string {
	return "UpsertReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertReviewResponseValidationError{}

// Validate checks the field values on GetReviewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetReviewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	return nil
}

// GetReviewsRequestValidationError is the validation error returned by
// GetReviewsRequest.Validate if the designated constraints aren't met.
type GetReviewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsRequestValidationError) ErrorName() string {
	return "GetReviewsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsRequestValidationError{}

// Validate checks the field values on GetReviewsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReviewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetReviews() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReviewsResponseValidationError{
					field:  fmt.Sprintf("Reviews[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetReviewsResponseValidationError is the validation error returned by
// GetReviewsResponse.Validate if the designated constraints aren't met.
type GetReviewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsResponseValidationError) ErrorName() string {
	return "GetReviewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsResponseValidationError{}

// Validate checks the field values on GetIndicatorScoreResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIndicatorScoreResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIndicatorScore() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIndicatorScoreResponseValidationError{
					field:  fmt.Sprintf("IndicatorScore[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetIndicatorScoreResponseValidationError is the validation error returned by
// GetIndicatorScoreResponse.Validate if the designated constraints aren't met.
type GetIndicatorScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIndicatorScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIndicatorScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIndicatorScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIndicatorScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIndicatorScoreResponseValidationError) ErrorName() string {
	return "GetIndicatorScoreResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIndicatorScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIndicatorScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIndicatorScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIndicatorScoreResponseValidationError{}

// Validate checks the field values on GetScoreResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetScoreResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetScore() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetScoreResponseValidationError{
					field:  fmt.Sprintf("Score[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetScoreResponseValidationError is the validation error returned by
// GetScoreResponse.Validate if the designated constraints aren't met.
type GetScoreResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScoreResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScoreResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScoreResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScoreResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScoreResponseValidationError) ErrorName() string { return "GetScoreResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetScoreResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScoreResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScoreResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScoreResponseValidationError{}

// Validate checks the field values on Score with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Score) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IndicatorId

	// no validation rules for Score

	return nil
}

// ScoreValidationError is the validation error returned by Score.Validate if
// the designated constraints aren't met.
type ScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScoreValidationError) ErrorName() string { return "ScoreValidationError" }

// Error satisfies the builtin error interface
func (e ScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScoreValidationError{}

// Validate checks the field values on IndicatorScore with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *IndicatorScore) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IndicatorId

	// no validation rules for Title

	// no validation rules for Score

	return nil
}

// IndicatorScoreValidationError is the validation error returned by
// IndicatorScore.Validate if the designated constraints aren't met.
type IndicatorScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorScoreValidationError) ErrorName() string { return "IndicatorScoreValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicatorScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorScoreValidationError{}

// Validate checks the field values on UpsertScoreRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpsertScoreRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIndicatorScore() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertScoreRequestValidationError{
					field:  fmt.Sprintf("IndicatorScore[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UpsertScoreRequestValidationError is the validation error returned by
// UpsertScoreRequest.Validate if the designated constraints aren't met.
type UpsertScoreRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertScoreRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertScoreRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertScoreRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertScoreRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertScoreRequestValidationError) ErrorName() string {
	return "UpsertScoreRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertScoreRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertScoreRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertScoreRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertScoreRequestValidationError{}

// Validate checks the field values on GetPollResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPollResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPollResponseValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPollResponseValidationError is the validation error returned by
// GetPollResponse.Validate if the designated constraints aren't met.
type GetPollResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollResponseValidationError) ErrorName() string { return "GetPollResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPollResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollResponseValidationError{}

// Validate checks the field values on DeleteAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAnswerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteAnswerRequestValidationError is the validation error returned by
// DeleteAnswerRequest.Validate if the designated constraints aren't met.
type DeleteAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAnswerRequestValidationError) ErrorName() string {
	return "DeleteAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAnswerRequestValidationError{}

// Validate checks the field values on UpdateAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAnswerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Answer

	// no validation rules for Score

	return nil
}

// UpdateAnswerRequestValidationError is the validation error returned by
// UpdateAnswerRequest.Validate if the designated constraints aren't met.
type UpdateAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAnswerRequestValidationError) ErrorName() string {
	return "UpdateAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAnswerRequestValidationError{}

// Validate checks the field values on UpdateAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAnswerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for QuestionId

	// no validation rules for Answer

	// no validation rules for Score

	return nil
}

// UpdateAnswerResponseValidationError is the validation error returned by
// UpdateAnswerResponse.Validate if the designated constraints aren't met.
type UpdateAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAnswerResponseValidationError) ErrorName() string {
	return "UpdateAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAnswerResponseValidationError{}

// Validate checks the field values on CreateAnswerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAnswerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for QuestionId

	// no validation rules for Answer

	// no validation rules for Score

	return nil
}

// CreateAnswerRequestValidationError is the validation error returned by
// CreateAnswerRequest.Validate if the designated constraints aren't met.
type CreateAnswerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnswerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnswerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnswerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnswerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnswerRequestValidationError) ErrorName() string {
	return "CreateAnswerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnswerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnswerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnswerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnswerRequestValidationError{}

// Validate checks the field values on CreateAnswerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAnswerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateAnswerResponseValidationError is the validation error returned by
// CreateAnswerResponse.Validate if the designated constraints aren't met.
type CreateAnswerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAnswerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAnswerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAnswerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAnswerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAnswerResponseValidationError) ErrorName() string {
	return "CreateAnswerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAnswerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAnswerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAnswerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAnswerResponseValidationError{}

// Validate checks the field values on GetAnswersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnswersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAnswersResponseValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAnswersResponseValidationError is the validation error returned by
// GetAnswersResponse.Validate if the designated constraints aren't met.
type GetAnswersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnswersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnswersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnswersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnswersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnswersResponseValidationError) ErrorName() string {
	return "GetAnswersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnswersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnswersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnswersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnswersResponseValidationError{}

// Validate checks the field values on DeleteQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteQuestionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteQuestionRequestValidationError is the validation error returned by
// DeleteQuestionRequest.Validate if the designated constraints aren't met.
type DeleteQuestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQuestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQuestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQuestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQuestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQuestionRequestValidationError) ErrorName() string {
	return "DeleteQuestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQuestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQuestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQuestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQuestionRequestValidationError{}

// Validate checks the field values on UpdateQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateQuestionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	return nil
}

// UpdateQuestionRequestValidationError is the validation error returned by
// UpdateQuestionRequest.Validate if the designated constraints aren't met.
type UpdateQuestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuestionRequestValidationError) ErrorName() string {
	return "UpdateQuestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuestionRequestValidationError{}

// Validate checks the field values on UpdateQuestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateQuestionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	return nil
}

// UpdateQuestionResponseValidationError is the validation error returned by
// UpdateQuestionResponse.Validate if the designated constraints aren't met.
type UpdateQuestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateQuestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateQuestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateQuestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateQuestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateQuestionResponseValidationError) ErrorName() string {
	return "UpdateQuestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateQuestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateQuestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateQuestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateQuestionResponseValidationError{}

// Validate checks the field values on CreateQuestionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateQuestionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IndicatorId

	// no validation rules for Title

	return nil
}

// CreateQuestionRequestValidationError is the validation error returned by
// CreateQuestionRequest.Validate if the designated constraints aren't met.
type CreateQuestionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionRequestValidationError) ErrorName() string {
	return "CreateQuestionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionRequestValidationError{}

// Validate checks the field values on CreateQuestionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateQuestionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateQuestionResponseValidationError is the validation error returned by
// CreateQuestionResponse.Validate if the designated constraints aren't met.
type CreateQuestionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuestionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuestionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuestionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuestionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuestionResponseValidationError) ErrorName() string {
	return "CreateQuestionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuestionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuestionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuestionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuestionResponseValidationError{}

// Validate checks the field values on GetQuestionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQuestionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetQuestionsResponseValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetQuestionsResponseValidationError is the validation error returned by
// GetQuestionsResponse.Validate if the designated constraints aren't met.
type GetQuestionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionsResponseValidationError) ErrorName() string {
	return "GetQuestionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionsResponseValidationError{}

// Validate checks the field values on Indicator with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Indicator) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// IndicatorValidationError is the validation error returned by
// Indicator.Validate if the designated constraints aren't met.
type IndicatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IndicatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IndicatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IndicatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IndicatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IndicatorValidationError) ErrorName() string { return "IndicatorValidationError" }

// Error satisfies the builtin error interface
func (e IndicatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIndicator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IndicatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IndicatorValidationError{}

// Validate checks the field values on GetIndicatorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIndicatorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetIndicators() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetIndicatorsResponseValidationError{
					field:  fmt.Sprintf("Indicators[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetIndicatorsResponseValidationError is the validation error returned by
// GetIndicatorsResponse.Validate if the designated constraints aren't met.
type GetIndicatorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIndicatorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIndicatorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIndicatorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIndicatorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIndicatorsResponseValidationError) ErrorName() string {
	return "GetIndicatorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIndicatorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIndicatorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIndicatorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIndicatorsResponseValidationError{}

// Validate checks the field values on CreateIndicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateIndicatorRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// CreateIndicatorRequestValidationError is the validation error returned by
// CreateIndicatorRequest.Validate if the designated constraints aren't met.
type CreateIndicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIndicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIndicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIndicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIndicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIndicatorRequestValidationError) ErrorName() string {
	return "CreateIndicatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIndicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIndicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIndicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIndicatorRequestValidationError{}

// Validate checks the field values on CreateIndicatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateIndicatorResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateIndicatorResponseValidationError is the validation error returned by
// CreateIndicatorResponse.Validate if the designated constraints aren't met.
type CreateIndicatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateIndicatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateIndicatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateIndicatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateIndicatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateIndicatorResponseValidationError) ErrorName() string {
	return "CreateIndicatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateIndicatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateIndicatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateIndicatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateIndicatorResponseValidationError{}

// Validate checks the field values on UpdateIndicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIndicatorRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// UpdateIndicatorRequestValidationError is the validation error returned by
// UpdateIndicatorRequest.Validate if the designated constraints aren't met.
type UpdateIndicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIndicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIndicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIndicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIndicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIndicatorRequestValidationError) ErrorName() string {
	return "UpdateIndicatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIndicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIndicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIndicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIndicatorRequestValidationError{}

// Validate checks the field values on UpdateIndicatorResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIndicatorResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	return nil
}

// UpdateIndicatorResponseValidationError is the validation error returned by
// UpdateIndicatorResponse.Validate if the designated constraints aren't met.
type UpdateIndicatorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIndicatorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIndicatorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIndicatorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIndicatorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIndicatorResponseValidationError) ErrorName() string {
	return "UpdateIndicatorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIndicatorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIndicatorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIndicatorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIndicatorResponseValidationError{}

// Validate checks the field values on DeleteIndicatorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteIndicatorRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteIndicatorRequestValidationError is the validation error returned by
// DeleteIndicatorRequest.Validate if the designated constraints aren't met.
type DeleteIndicatorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteIndicatorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteIndicatorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteIndicatorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteIndicatorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteIndicatorRequestValidationError) ErrorName() string {
	return "DeleteIndicatorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteIndicatorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteIndicatorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteIndicatorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteIndicatorRequestValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignInRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SignInRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 20 {
		return SignInRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 20 runes, inclusive",
		}
	}

	return nil
}

func (m *SignInRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SignInRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Role

	// no validation rules for Verified

	// no validation rules for Balance

	return nil
}

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignUpRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	if l := utf8.RuneCountInString(m.GetPassword()); l < 8 || l > 20 {
		return SignUpRequestValidationError{
			field:  "Password",
			reason: "value length must be between 8 and 20 runes, inclusive",
		}
	}

	// no validation rules for PhoneNumber

	// no validation rules for Role

	return nil
}

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignUpResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SignUpResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// SignUpResponseValidationError is the validation error returned by
// SignUpResponse.Validate if the designated constraints aren't met.
type SignUpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpResponseValidationError) ErrorName() string { return "SignUpResponseValidationError" }

// Error satisfies the builtin error interface
func (e SignUpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for PhoneNumber

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for PhoneNumber

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on GetCourseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCourseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetCourseRequestValidationError is the validation error returned by
// GetCourseRequest.Validate if the designated constraints aren't met.
type GetCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseRequestValidationError) ErrorName() string { return "GetCourseRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseRequestValidationError{}

// Validate checks the field values on GetCourseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCourseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Price

	return nil
}

// GetCourseResponseValidationError is the validation error returned by
// GetCourseResponse.Validate if the designated constraints aren't met.
type GetCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseResponseValidationError) ErrorName() string {
	return "GetCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseResponseValidationError{}

// Validate checks the field values on CreateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Price

	return nil
}

// CreateCourseRequestValidationError is the validation error returned by
// CreateCourseRequest.Validate if the designated constraints aren't met.
type CreateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseRequestValidationError) ErrorName() string {
	return "CreateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseRequestValidationError{}

// Validate checks the field values on CreateCourseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateCourseResponseValidationError is the validation error returned by
// CreateCourseResponse.Validate if the designated constraints aren't met.
type CreateCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseResponseValidationError) ErrorName() string {
	return "CreateCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseResponseValidationError{}

// Validate checks the field values on UpdateCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCourseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Price

	return nil
}

// UpdateCourseRequestValidationError is the validation error returned by
// UpdateCourseRequest.Validate if the designated constraints aren't met.
type UpdateCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseRequestValidationError) ErrorName() string {
	return "UpdateCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseRequestValidationError{}

// Validate checks the field values on UpdateCourseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCourseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Price

	return nil
}

// UpdateCourseResponseValidationError is the validation error returned by
// UpdateCourseResponse.Validate if the designated constraints aren't met.
type UpdateCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseResponseValidationError) ErrorName() string {
	return "UpdateCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseResponseValidationError{}

// Validate checks the field values on DeleteCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCourseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	return nil
}

// DeleteCourseRequestValidationError is the validation error returned by
// DeleteCourseRequest.Validate if the designated constraints aren't met.
type DeleteCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseRequestValidationError) ErrorName() string {
	return "DeleteCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseRequestValidationError{}

// Validate checks the field values on CourseSection with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CourseSection) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for FilePath

	return nil
}

// CourseSectionValidationError is the validation error returned by
// CourseSection.Validate if the designated constraints aren't met.
type CourseSectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseSectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseSectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseSectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseSectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseSectionValidationError) ErrorName() string { return "CourseSectionValidationError" }

// Error satisfies the builtin error interface
func (e CourseSectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseSection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseSectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseSectionValidationError{}

// Validate checks the field values on GetCourseSectionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCourseSectionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	return nil
}

// GetCourseSectionsRequestValidationError is the validation error returned by
// GetCourseSectionsRequest.Validate if the designated constraints aren't met.
type GetCourseSectionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseSectionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseSectionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseSectionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseSectionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseSectionsRequestValidationError) ErrorName() string {
	return "GetCourseSectionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseSectionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseSectionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseSectionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseSectionsRequestValidationError{}

// Validate checks the field values on GetCourseSectionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCourseSectionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCourseSectionsResponseValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCourseSectionsResponseValidationError is the validation error returned by
// GetCourseSectionsResponse.Validate if the designated constraints aren't met.
type GetCourseSectionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseSectionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseSectionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseSectionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseSectionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseSectionsResponseValidationError) ErrorName() string {
	return "GetCourseSectionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseSectionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseSectionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseSectionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseSectionsResponseValidationError{}

// Validate checks the field values on CreateCourseSectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseSectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CourseId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for File

	return nil
}

// CreateCourseSectionRequestValidationError is the validation error returned
// by CreateCourseSectionRequest.Validate if the designated constraints aren't met.
type CreateCourseSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseSectionRequestValidationError) ErrorName() string {
	return "CreateCourseSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseSectionRequestValidationError{}

// Validate checks the field values on CreateCourseSectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCourseSectionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateCourseSectionResponseValidationError is the validation error returned
// by CreateCourseSectionResponse.Validate if the designated constraints
// aren't met.
type CreateCourseSectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCourseSectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCourseSectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCourseSectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCourseSectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCourseSectionResponseValidationError) ErrorName() string {
	return "CreateCourseSectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCourseSectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCourseSectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCourseSectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCourseSectionResponseValidationError{}

// Validate checks the field values on UpdateCourseSectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCourseSectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CourseId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for File

	return nil
}

// UpdateCourseSectionRequestValidationError is the validation error returned
// by UpdateCourseSectionRequest.Validate if the designated constraints aren't met.
type UpdateCourseSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseSectionRequestValidationError) ErrorName() string {
	return "UpdateCourseSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseSectionRequestValidationError{}

// Validate checks the field values on UpdateCourseSectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCourseSectionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CourseId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for FileName

	return nil
}

// UpdateCourseSectionResponseValidationError is the validation error returned
// by UpdateCourseSectionResponse.Validate if the designated constraints
// aren't met.
type UpdateCourseSectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCourseSectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCourseSectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCourseSectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCourseSectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCourseSectionResponseValidationError) ErrorName() string {
	return "UpdateCourseSectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCourseSectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCourseSectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCourseSectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCourseSectionResponseValidationError{}

// Validate checks the field values on DeleteCourseSectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCourseSectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SectionId

	return nil
}

// DeleteCourseSectionRequestValidationError is the validation error returned
// by DeleteCourseSectionRequest.Validate if the designated constraints aren't met.
type DeleteCourseSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCourseSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCourseSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCourseSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCourseSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCourseSectionRequestValidationError) ErrorName() string {
	return "DeleteCourseSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCourseSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCourseSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCourseSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCourseSectionRequestValidationError{}

// Validate checks the field values on GetReviewsResponse_Reviews with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReviewsResponse_Reviews) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Firstname

	// no validation rules for Lastname

	// no validation rules for Feedback

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReviewsResponse_ReviewsValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetReviewsResponse_ReviewsValidationError is the validation error returned
// by GetReviewsResponse_Reviews.Validate if the designated constraints aren't met.
type GetReviewsResponse_ReviewsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReviewsResponse_ReviewsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReviewsResponse_ReviewsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReviewsResponse_ReviewsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReviewsResponse_ReviewsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReviewsResponse_ReviewsValidationError) ErrorName() string {
	return "GetReviewsResponse_ReviewsValidationError"
}

// Error satisfies the builtin error interface
func (e GetReviewsResponse_ReviewsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReviewsResponse_Reviews.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReviewsResponse_ReviewsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReviewsResponse_ReviewsValidationError{}

// Validate checks the field values on GetIndicatorScoreResponse_IndicatorScore
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetIndicatorScoreResponse_IndicatorScore) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Score

	return nil
}

// GetIndicatorScoreResponse_IndicatorScoreValidationError is the validation
// error returned by GetIndicatorScoreResponse_IndicatorScore.Validate if the
// designated constraints aren't met.
type GetIndicatorScoreResponse_IndicatorScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) ErrorName() string {
	return "GetIndicatorScoreResponse_IndicatorScoreValidationError"
}

// Error satisfies the builtin error interface
func (e GetIndicatorScoreResponse_IndicatorScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIndicatorScoreResponse_IndicatorScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIndicatorScoreResponse_IndicatorScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIndicatorScoreResponse_IndicatorScoreValidationError{}

// Validate checks the field values on GetPollResponse_Question with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPollResponse_Question) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IndicatorId

	// no validation rules for Title

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPollResponse_QuestionValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPollResponse_QuestionValidationError is the validation error returned by
// GetPollResponse_Question.Validate if the designated constraints aren't met.
type GetPollResponse_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollResponse_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollResponse_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollResponse_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollResponse_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollResponse_QuestionValidationError) ErrorName() string {
	return "GetPollResponse_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e GetPollResponse_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollResponse_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollResponse_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollResponse_QuestionValidationError{}

// Validate checks the field values on GetPollResponse_Question_Answer with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPollResponse_Question_Answer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for QuestionId

	// no validation rules for Answer

	// no validation rules for Score

	return nil
}

// GetPollResponse_Question_AnswerValidationError is the validation error
// returned by GetPollResponse_Question_Answer.Validate if the designated
// constraints aren't met.
type GetPollResponse_Question_AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPollResponse_Question_AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPollResponse_Question_AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPollResponse_Question_AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPollResponse_Question_AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPollResponse_Question_AnswerValidationError) ErrorName() string {
	return "GetPollResponse_Question_AnswerValidationError"
}

// Error satisfies the builtin error interface
func (e GetPollResponse_Question_AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPollResponse_Question_Answer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPollResponse_Question_AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPollResponse_Question_AnswerValidationError{}

// Validate checks the field values on GetAnswersResponse_Answer with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnswersResponse_Answer) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for QuestionId

	// no validation rules for Answer

	// no validation rules for Score

	return nil
}

// GetAnswersResponse_AnswerValidationError is the validation error returned by
// GetAnswersResponse_Answer.Validate if the designated constraints aren't met.
type GetAnswersResponse_AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnswersResponse_AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnswersResponse_AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnswersResponse_AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnswersResponse_AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnswersResponse_AnswerValidationError) ErrorName() string {
	return "GetAnswersResponse_AnswerValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnswersResponse_AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnswersResponse_Answer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnswersResponse_AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnswersResponse_AnswerValidationError{}

// Validate checks the field values on GetQuestionsResponse_Question with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetQuestionsResponse_Question) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for IndicatorId

	// no validation rules for Title

	return nil
}

// GetQuestionsResponse_QuestionValidationError is the validation error
// returned by GetQuestionsResponse_Question.Validate if the designated
// constraints aren't met.
type GetQuestionsResponse_QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetQuestionsResponse_QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetQuestionsResponse_QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetQuestionsResponse_QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetQuestionsResponse_QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetQuestionsResponse_QuestionValidationError) ErrorName() string {
	return "GetQuestionsResponse_QuestionValidationError"
}

// Error satisfies the builtin error interface
func (e GetQuestionsResponse_QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetQuestionsResponse_Question.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetQuestionsResponse_QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetQuestionsResponse_QuestionValidationError{}
